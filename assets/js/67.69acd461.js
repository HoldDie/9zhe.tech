(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{683:function(t,l,v){"use strict";v.r(l);var _=v(33),a=Object(_.a)({},(function(){var t=this,l=t.$createElement,v=t._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"什么是门面模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是门面模式"}},[t._v("#")]),t._v(" 什么是门面模式")]),t._v(" "),v("ul",[v("li",[t._v("Facade Design Pattern")]),t._v(" "),v("li",[t._v("门面模式为子系统提供一组统一的接口，定义一组高层接口让子系统更易用。")])]),t._v(" "),v("h3",{attrs:{id:"为什么使用门面模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用门面模式"}},[t._v("#")]),t._v(" 为什么使用门面模式")]),t._v(" "),v("ul",[v("li",[t._v("解决易用性问题\n"),v("ul",[v("li",[t._v("通过减少网络请求的次数，提高应用的相应速度。")]),t._v(" "),v("li",[t._v("门面模式可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。")]),t._v(" "),v("li",[t._v("门面模式有点类似之前讲到的迪米特法则（最少知识原则）和接口隔离原则：两个有交互的系统，只暴露有限的必要的接口。")]),t._v(" "),v("li",[t._v("使用封装、抽象的设计思想，提供更抽象的接口，封装底层实现细节。")])])]),t._v(" "),v("li",[t._v("解决性能问题\n"),v("ul",[v("li",[t._v("尽可能聚合接口，避免多次网络请求。")])])]),t._v(" "),v("li",[t._v("解决分布式事务问题\n"),v("ul",[v("li",[t._v("如果可以调用几个接口，并且可以一起把事务问题解决，而不用使用更复杂的分布式事务框架。")])])])]),t._v(" "),v("h3",{attrs:{id:"门面模式和适配器模式区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#门面模式和适配器模式区别"}},[t._v("#")]),t._v(" 门面模式和适配器模式区别")]),t._v(" "),v("ul",[v("li",[t._v("适配器模式\n"),v("ul",[v("li",[t._v("是做接口转换，解决的是原接口和目标接口不匹配的问题。")]),t._v(" "),v("li",[t._v("注重兼容性。")])])]),t._v(" "),v("li",[t._v("门面模式\n"),v("ul",[v("li",[t._v("做接口整合，解决是多接口调用带来的问题。")]),t._v(" "),v("li",[t._v("注重易用性。")])])])])])}),[],!1,null,null,null);l.default=a.exports}}]);