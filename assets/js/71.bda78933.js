(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{675:function(s,t,a){"use strict";a.r(t);var n=a(33),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"模板模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板模式"}},[s._v("#")]),s._v(" 模板模式")]),s._v(" "),a("ul",[a("li",[s._v("Template Method Design Pattern")]),s._v(" "),a("li",[s._v("模板方法模式在一个方法中定义一个算法骨架，并将某些步骤推迟到子类中实现。")]),s._v(" "),a("li",[s._v("模板方法可以让子类在不改变算法整体结构的情况下，重新定义算法中的某些步骤。")]),s._v(" "),a("li",[s._v("在 Java 中定义这样的模板方法，为了避免子类重写它，需要将函数定义为 final。")])]),s._v(" "),a("h3",{attrs:{id:"模板方法作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板方法作用"}},[s._v("#")]),s._v(" 模板方法作用")]),s._v(" "),a("ul",[a("li",[s._v("复用\n"),a("ul",[a("li",[s._v("模板模式把一个算法中不变的流程抽象到父类的模板方法中，将可变的部分留给子类来实现。")]),s._v(" "),a("li",[s._v("所有的子类都可以复用父类中的模板方法定义的流程代码。")]),s._v(" "),a("li",[s._v("主要通过继承父类代码来实现。")]),s._v(" "),a("li",[s._v("实例\n"),a("ul",[a("li",[s._v("Java InputStream\n"),a("ul",[a("li",[s._v("在 InputStream 读取数据中，有个 read() 函数是一个模板方法，定义了读取数据的整个流程，并且暴露了一个可以由子类来定制的抽象方法。")])])]),s._v(" "),a("li",[s._v("Java AbstractList\n"),a("ul",[a("li",[s._v("在 AbstractList 类中，addAll() 函数可以看做模板方法，add() 是子类需要重写的方法。")]),s._v(" "),a("li",[s._v("尽管没有声明为 abstract 的，但函数实现直接抛出了 UnsupportOperationException 异常。")])])])])])])]),s._v(" "),a("li",[s._v("扩展\n"),a("ul",[a("li",[s._v("这里的扩展，指的不是代码的扩展性，而是框架的扩展性，有点类似之前讲到的控制反转。")]),s._v(" "),a("li",[s._v("实例\n"),a("ul",[a("li",[s._v("Java Servlet\n"),a("ul",[a("li",[s._v("使用 Servlet 开发 Web 项目，我们需要定义一个继承 HttpServlet 的类，并且重写其中的 doGet() 或 doPost() 方法，来分别处理 get 和 post 请求。")]),s._v(" "),a("li",[s._v("HttpServlet 的 service() 方法就是一个模板方法，它实现了整个 HTTP 请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。")]),s._v(" "),a("li",[s._v("Servlet 框架提供了一个扩展点（doGet()、doPost()方法），让框架用户在不用改变 Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。")])])]),s._v(" "),a("li",[s._v("Junit TestCase\n"),a("ul",[a("li",[s._v("在使用 JUnit 测试框架来编写单元测试的时候，我们编写的测试类都要继承框架提供的 TestCase 类。")]),s._v(" "),a("li",[s._v("在 TestCase 类中，runBare() 函数是模板方法，它定义了执行测试用例的整体流程：先执行 setUp() 做些准备工作，然后执行 runTest() 运行真正的测试代码，最后执行 tearDown() 做扫尾工作。")]),s._v(" "),a("li",[s._v("TestCase 类的具体代码如下所示。尽管 setUp()、tearDown() 并不是抽象函数，还提供了默认的实现，不强制子类去重新实现，但\b这部分也是可以在子类中定制的，所以也符合模板模式的定义。")])])])])])])])]),s._v(" "),a("h3",{attrs:{id:"回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调函数"}},[s._v("#")]),s._v(" 回调函数")]),s._v(" "),a("h4",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),a("ul",[a("li",[s._v("相对于普通的函数调用来说，回调是一种双向调用关系。A 类事先注册某个函数 F 到 B 类，A 类在调用 B 类的 P 函数的时候，B 类反过来调用 A 类注册给它的 F 函数。")]),s._v(" "),a("li",[s._v("F 函数就是“回调函数”。A 调用 B，B 反过来又调用 A，这种调用机制就叫作“回调”。")])]),s._v(" "),a("h4",{attrs:{id:"实例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例代码"}},[s._v("#")]),s._v(" 实例代码")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ICallback")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodToCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BClass")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ICallback")]),s._v(" callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n    callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodToCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AClass")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BClass")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("process")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ICallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//回调对象")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodToCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Call back me."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h4",{attrs:{id:"回调分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调分类"}},[s._v("#")]),s._v(" 回调分类")]),s._v(" "),a("ul",[a("li",[s._v("同步回调\n"),a("ul",[a("li",[s._v("在函数返回之前执行回调函数。")])])]),s._v(" "),a("li",[s._v("异步回调\n"),a("ul",[a("li",[s._v("类似支付时，调用第三方接口，支持同步回调和异步回调。")])])])]),s._v(" "),a("h4",{attrs:{id:"应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用实例"}},[s._v("#")]),s._v(" 应用实例")]),s._v(" "),a("ul",[a("li",[s._v("JdbcTemplate\n"),a("ul",[a("li",[s._v("尽管都叫作 xxxTemplate，但它们并非基于模板模式来实现的，而是基于回调来实现的，确切地说应该是同步回调。")]),s._v(" "),a("li",[s._v("Java 提供了 JDBC 类库来封装不同类型的数据库操作。不过，直接使用 JDBC 来编写操作数据库的代码，还是有点复杂的。")]),s._v(" "),a("li",[s._v("Spring 提供了 JdbcTemplate，对 JDBC 进一步封装，来简化数据库编程。")]),s._v(" "),a("li",[s._v("JdbcTemplate 通过回调的机制，将不变的执行流程抽离出来，放到模板方法 execute() 中，将可变的部分设计成回调 StatementCallback，由用户来定制。")]),s._v(" "),a("li",[s._v("query() 函数是对 execute() 函数的二次封装，让接口用起来更加方便。")])])]),s._v(" "),a("li",[s._v("Android setClickListener\n"),a("ul",[a("li",[s._v("事件监听器很像回调，即传递一个包含回调函数（onClick()）的对象给另一个函数。")]),s._v(" "),a("li",[s._v("当用户点击按钮的时候，发送点击事件给观察者，并且执行相应的 onClick() 函数。")])])]),s._v(" "),a("li",[s._v("addShutdownHook\n"),a("ul",[a("li",[s._v("JVM 提供了 Runtime.addShutdownHook(Thread hook) 方法，可以注册一个 JVM 关闭的 Hook。当应用程序关闭的时候，JVM 会自动调用 Hook 代码。")]),s._v(" "),a("li",[s._v("有关 Hook 的逻辑都被封装到 ApplicationShutdownHooks 类中了。当应用程序关闭的时候，JVM 会调用这个类的 runHooks() 方法，创建多个线程，并发地执行多个 Hook。")])])])]),s._v(" "),a("h3",{attrs:{id:"模板模式-vs-回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板模式-vs-回调"}},[s._v("#")]),s._v(" 模板模式 VS 回调")]),s._v(" "),a("ul",[a("li",[s._v("从应用场景\n"),a("ul",[a("li",[s._v("同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。")]),s._v(" "),a("li",[s._v("而异步回调跟模板模式有较大差别，更像是观察者模式。")])])]),s._v(" "),a("li",[s._v("从代码实现\n"),a("ul",[a("li",[s._v("回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；")]),s._v(" "),a("li",[s._v("模板模式基于继承关系来实现，子类重写父类的抽象方法，是一种类之间的关系。")])])])]),s._v(" "),a("h4",{attrs:{id:"回调相对于模板方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调相对于模板方法"}},[s._v("#")]),s._v(" 回调相对于模板方法")]),s._v(" "),a("ul",[a("li",[s._v("像 Java 这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力。")]),s._v(" "),a("li",[s._v("回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类。")]),s._v(" "),a("li",[s._v("如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，那即便我们只用到其中的一个模板方法，子类也必须实现所有的抽象方法。而回调就更加灵活，我们只需要往用到的模板方法中注入回调对象即可。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);