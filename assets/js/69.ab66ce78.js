(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{679:function(a,s,t){"use strict";t.r(s);var e=t(33),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"什么是享元模式？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是享元模式？"}},[a._v("#")]),a._v(" 什么是享元模式？")]),a._v(" "),t("ul",[t("li",[a._v("Flyweight Design Pattern")]),a._v(" "),t("li",[a._v("享元模式的意图是复用对象，节省内存，前提是享元对象是不可变的。")]),a._v(" "),t("li",[a._v("当一个系统中存在大量重复对象的时候，如果这些重复对象是不可变对象，我们就可以利用享元模式将对象设计成享元，在内存中只保留一份实例，供多处代码引用。")]),a._v(" "),t("li",[a._v("定义中的“不可变对象”,一旦通过构造函数初始化完成之后,它的状态就不会再被修改了。")]),a._v(" "),t("li",[a._v("享元模式的代码实现，主要通过工厂模式，在工厂类中，通过一个 Map 来缓存已经创建过的享元对象，来达到复用的目的。")])]),a._v(" "),t("h3",{attrs:{id:"享元模式-vs-单例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-vs-单例"}},[a._v("#")]),a._v(" 享元模式 VS 单例")]),a._v(" "),t("ul",[t("li",[a._v("创建个数\n"),t("ul",[t("li",[a._v("单例模式：一个类只能创建一个对象。")]),a._v(" "),t("li",[a._v("享元模式：一个类可以创建多个对象，每个对象被多处代码引用。")])])]),a._v(" "),t("li",[a._v("复用层面\n"),t("ul",[t("li",[a._v("单例模式：使用单例模式，为了限制同一个对象的个数。")]),a._v(" "),t("li",[a._v("享元模式：为了对象复用，节省内存。")])])])]),a._v(" "),t("h3",{attrs:{id:"享元模式-vs-缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-vs-缓存"}},[a._v("#")]),a._v(" 享元模式 vs 缓存")]),a._v(" "),t("ul",[t("li",[a._v("缓存：一般指数据库缓存，为了提高访问效率，而非复用。")]),a._v(" "),t("li",[a._v("享元模式：事先缓存，主要为了复用。")])]),a._v(" "),t("h3",{attrs:{id:"在-java-integer-中的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-java-integer-中的应用"}},[a._v("#")]),a._v(" 在 Java Integer 中的应用")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("56")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//自动装箱")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Integer i = 56；底层执行了：Integer i = Integer.valueOf(56);")]),a._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//自动拆箱")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 底层执行了：int j = i.intValue();")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("blockquote",[t("p",[a._v("因为 Integer 用到了享元模式来复用对象，才导致了这样的运行结果。当我们通过自动装箱，也就是调用 valueOf() 来创建 Integer 对象的时候，如果要创建的 Integer 对象的值在 -128 到 127 之间，会从 IntegerCache 类中直接返回，否则才调用 new 方法创建。")])]),a._v(" "),t("h4",{attrs:{id:"设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置"}},[a._v("#")]),a._v(" 设置")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//方法一：")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Djava")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("lang"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IntegerCache")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("high"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("255")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//方法二：")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("XX"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AutoBoxCacheMax")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("255")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"在-string-类中应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在-string-类中应用"}},[a._v("#")]),a._v(" 在 String 类中应用")]),a._v(" "),t("ul",[t("li",[a._v("String 类的享元模式的设计，跟 Integer 类稍微有些不同。Integer 类中要共享的对象，是在类加载的时候，就集中一次性创建好的。")]),a._v(" "),t("li",[a._v("对于字符串来说，我们没法事先知道要共享哪些字符串常量，所以没办法事先创建好，只能在某个字符串常量第一次被用到的时候，存储到常量池中，当之后再用到的时候，直接引用常量池中已经存在的即可，就不需要再重新创建了。")])]),a._v(" "),t("h3",{attrs:{id:"享元模式缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#享元模式缺点"}},[a._v("#")]),a._v(" 享元模式缺点")]),a._v(" "),t("ul",[t("li",[a._v("对于 JVM 的垃圾回收并不友好，享元工厂类一直保存了对象的引用，导致享元对象在没有任何代码使用的情况下，也不会被垃圾回收掉。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);